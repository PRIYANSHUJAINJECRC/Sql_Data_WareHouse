/******************************************************************************************
    WARNING ⚠️
    --------------------------------------------------------------------------------------
    This procedure will TRUNCATE (delete all records) and reload data into silver tables.  
    Make sure you understand that TRUNCATE removes all existing rows permanently.  
    Use with caution in production environments.  
    
    PURPOSE
    --------------------------------------------------------------------------------------
    The purpose of this procedure is to load, clean, and standardize data 
    from the bronze layer into the silver layer of the Data Warehouse.
******************************************************************************************/

CREATE OR ALTER PROCEDURE silver.load_silver 
AS 
BEGIN 
    -------------------------
    -- crm_cust_info
    -------------------------
    PRINT 'Truncating silver.crm_cust_info...';
    TRUNCATE TABLE silver.crm_cust_info;

    PRINT 'Inserting data into silver.crm_cust_info...';
    INSERT INTO silver.crm_cust_info
    (cst_id,cst_key,cst_firstname,cst_lastname,cst_gndr,cst_marital_status,cst_create_date)
    SELECT 
        cst_id,
        cst_key,
        TRIM(cst_firstname) AS cst_firstname,
        TRIM(cst_lastname) AS cst_lastname,
        CASE 
            WHEN UPPER(TRIM(cst_gndr))='M' THEN 'Male'
            WHEN UPPER(TRIM(cst_gndr))='F' THEN 'Female'
            ELSE 'n/a'
        END AS cst_gender,
        CASE 
            WHEN UPPER(TRIM(cst_marital_status))='M' THEN 'Married'
            WHEN UPPER(TRIM(cst_marital_status))='S' THEN 'Single'
            ELSE 'n/a'
        END AS cst_marital_status,
        cst_create_date
    FROM (
        SELECT *, ROW_NUMBER() OVER(PARTITION BY cst_id ORDER BY cst_create_date DESC) AS flag 
        FROM bronze.crm_cust_info
    ) t 
    WHERE flag=1;

    -------------------------
    -- crm_prd_info
    -------------------------
    IF OBJECT_ID('silver.crm_prd_info','U') IS NOT NULL
        DROP TABLE silver.crm_prd_info;

    CREATE TABLE silver.crm_prd_info(
        prd_id INT,
        cat_id NVARCHAR(50),
        prd_key NVARCHAR(50),
        prd_nm NVARCHAR(50),
        prd_cost INT,
        prd_line NVARCHAR(50),
        prd_start_dt DATE,
        prd_end_dt DATE,
        dwh_create_date DATETIME2 DEFAULT GETDATE()
    );

    PRINT 'Inserting data into silver.crm_prd_info...';
    INSERT INTO silver.crm_prd_info
    (prd_id, cat_id, prd_key, prd_nm, prd_cost, prd_line, prd_start_dt, prd_end_dt)
    SELECT 
        prd_id,
        REPLACE(SUBSTRING(prd_key,1,5),'-','_') AS cat_id,
        SUBSTRING(prd_key,7,LEN(prd_key)) AS prd_key,
        prd_nm,
        ISNULL(prd_cost,0) AS prd_cost,
        CASE 
            WHEN UPPER(TRIM(prd_line))='M' THEN 'Mountain'
            WHEN UPPER(TRIM(prd_line))='R' THEN 'Road'
            WHEN UPPER(TRIM(prd_line))='S' THEN 'Other Sales'
            WHEN UPPER(TRIM(prd_line))='T' THEN 'Touring'
            ELSE 'n/a' 
        END AS prd_line,
        CAST(prd_start_dt AS date) AS prd_start_dt,
        CAST(DATEADD(day, -1, LEAD(prd_start_dt) OVER (PARTITION BY prd_key ORDER BY prd_start_dt)) AS DATE) AS prd_end_dt
    FROM bronze.crm_prd_info;

    -------------------------
    -- crm_sales_details
    -------------------------
    IF OBJECT_ID('silver.crm_sales_details','U') IS NOT NULL
        DROP TABLE silver.crm_sales_details;

    CREATE TABLE silver.crm_sales_details(
        sal_ord_num NVARCHAR(50),
        sls_prd_key NVARCHAR(50),
        sls_cust_id INT,
        slr_order_dt DATE,
        sls_ship_dt DATE,
        sls_due_dt DATE,
        sls_sales INT,
        sls_quantity INT,
        sls_price INT,
        dwh_create_date DATETIME2 DEFAULT GETDATE()
    );

    PRINT 'Inserting data into silver.crm_sales_details...';
    INSERT INTO silver.crm_sales_details
    (sal_ord_num,sls_prd_key,sls_cust_id,slr_order_dt,sls_ship_dt,sls_due_dt,sls_sales,sls_quantity,sls_price)
    SELECT 
        sal_ord_num,
        sls_prd_key,
        sls_cust_id,
        CASE WHEN slr_order_dt=0 OR LEN(slr_order_dt)!=8 THEN NULL
             ELSE CAST(CAST(slr_order_dt AS varchar) AS date) END AS slr_order_dt,
        CASE WHEN sls_ship_dt=0 OR LEN(sls_ship_dt)!=8 THEN NULL
             ELSE CAST(CAST(sls_ship_dt AS varchar) AS date) END AS sls_ship_dt,
        CASE WHEN sls_due_dt=0 OR LEN(sls_due_dt)!=8 THEN NULL
             ELSE CAST(CAST(sls_due_dt AS varchar) AS date) END AS sls_due_dt,
        CASE 
            WHEN sls_sales IS NULL OR sls_sales<=0 OR sls_sales != ABS(sls_price)*sls_quantity 
            THEN ABS(sls_price)*sls_quantity
            ELSE sls_sales 
        END AS sls_sales,
        sls_quantity,
        CASE 
            WHEN sls_price IS NULL OR sls_price <=0 OR sls_price != sls_sales/NULLIF(sls_quantity,0) 
            THEN sls_sales/NULLIF(sls_quantity,0)
            ELSE sls_price 
        END AS sls_price
    FROM bronze.crm_sales_details;

    -------------------------
    -- erp_cust_az12
    -------------------------
    PRINT 'Truncating silver.erp_CUST_AZ12...';
    TRUNCATE TABLE silver.erp_CUST_AZ12;

    PRINT 'Inserting data into silver.erp_CUST_AZ12...';
    INSERT INTO silver.erp_CUST_AZ12(CID,BDATE,GEN)
    SELECT 
        CASE WHEN CID LIKE 'NAS%' THEN SUBSTRING(CID,4,LEN(CID)) ELSE CID END AS CID,
        CASE WHEN BDATE > GETDATE() THEN NULL ELSE BDATE END AS BDATE,
        CASE 
            WHEN GEN LIKE 'M%' THEN 'Male'
            WHEN GEN LIKE 'F%' THEN 'Female'
            ELSE 'n/a' 
        END AS GEN
    FROM bronze.erp_CUST_AZ12;

    -------------------------
    -- erp_loc_a101
    -------------------------
    PRINT 'Truncating silver.erp_loc_a101...';
    TRUNCATE TABLE silver.erp_loc_a101;

    PRINT 'Inserting data into silver.erp_loc_a101...';
    INSERT INTO silver.erp_loc_a101 (CID,CNTRY)
    SELECT 
        REPLACE(CID,'-','') AS CID,
        CASE 
            WHEN CNTRY='DE' OR CNTRY='Germany' THEN 'Germany'
            WHEN CNTRY LIKE 'US%' OR CNTRY='United States' THEN 'United States'
            WHEN CNTRY=' ' OR CNTRY IS NULL THEN 'n/a'
            ELSE CNTRY 
        END AS CNTRY
    FROM bronze.erp_loc_a101;

    -------------------------
    -- erp_PX_CAT_G1V2
    -------------------------
    PRINT 'Truncating silver.erp_PX_CAT_G1V2...';
    TRUNCATE TABLE silver.erp_PX_CAT_G1V2;

    PRINT 'Inserting data into silver.erp_PX_CAT_G1V2...';
    INSERT INTO silver.erp_PX_CAT_G1V2 (ID,CAT,SUBCAT,MAINTENANCE)
    SELECT ID,CAT,SUBCAT,MAINTENANCE 
    FROM bronze.erp_PX_CAT_G1V2;

END;
